includes:
    - vendor/phpstan/phpstan-strict-rules/rules.neon
    - phar://phpstan.phar/conf/bleedingEdge.neon

rules:
    - Kuria\Tools\PHPStan\TestTypeRule

parameters:
    level: max
    paths:
        - src/Collections
        - src/Iterable
        - src/Maybe
        - src/Result
        - tests
        - tools/PHPStan
    ignoreErrors:
        # static<T> is unsupported - https://github.com/phpstan/phpstan-src/pull/1289
        - message: '{should return [^\\]++\\Collections\\\w*(Map|List)}'
          identifier: return.type
          path: src/Collections/

        - message: '{^PHPDoc tag @return with type [^>]++> is (not subtype of|incompatible with) native type static\(}'
          identifier: return.phpDocType
          path: src/Collections/

        - message: '{^Type mixed in generic type [^>]++> in PHPDoc tag @return is not subtype of template type}'
          identifier: generics.notSubtype
          path: src/Collections/

        # collection/map cast methods - no @psalm-if-this-is equivalent exists
        - message: '{^Parameter #1 \$(values|pairs) of class [^\\]++\\Collections\\\w*(Map|List) constructor}'
          identifier: argument.type
          path: src/Collections/

        # assignment to $values (false-positives)
        - message: '{::\$values}'
          identifier: assign.propertyType
          path: src/Collections/Collection.php

        # can pass a single array to array_ functions (false-positive)
        - message: '{\$arr2 of function array_}'
          identifier: argument.type
          path: src/Collections/

        # inline @var doesn't work with nested generics - https://github.com/phpstan/phpstan/issues/10735
        - message: '{Map<TGroupKey of \(int\|string\)}'
          path: src/Collections/

        # mimicking array_column() behavior
        - message: '{^Variable property access on TValue of object}'
          path: src/Collections/ObjectMap.php

        # failed type inferrence in insertAfter()/insertBefore() closures (false-positive)
        - message: '{TMappedKey}'
          identifier: argument.templateType
          path: src/Collections/Map.php

        # Map::offsetSet() does not accept wrong key types
        - message: '{^Parameter #1 \$offset \(TKey of \(int\|string\)\) of method Kuria\\Collections\\Map::offsetSet\(\) should be contravariant with parameter \$offset}'
          identifier: method.childParameterType
          path: src/Collections/

        # it is up to the caller to not pass invalid keys (documented)
        - message: '{^Type array\[int\|string\] in generic type}'
          identifier: generics.notSubtype
          paths:
              - src/Collections/*ArrayList.php
              - src/Collections/*ArrayMap.php

        - message: '{^Type object\[string\] in generic type}'
          identifier: generics.notSubtype
          paths:
              - src/Collections/*ObjectList.php
              - src/Collections/*ObjectMap.php

        # instanceof check on $this->error (false-positive)
        - message: '{^Cannot access property \$error on TCaughtError of mixed}'
          identifier: property.nonObject
          path: src/Result/Error.php

        - message: '{^PHPDoc tag @var with type TCaughtError of TError is not subtype of native type}'
          identifier: varTag.nativeType
          path: src/Result/Error.php
